#%%
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

path = 'ex1data2.txt'
data2 = pd.read_csv(path, names=['Size', 'Bedrooms', 'Price'])
data2 = (data2 - data2.mean()) / data2.std()
data2.head()
data2.insert(0, 'Ones', 1)
cols = data2.shape[1]
X2 = data2.iloc[:,0:cols-1]
y2 = data2.iloc[:,cols-1:cols]

X2 = np.matrix(X2.values)
y2 = np.matrix(y2.values)
theta2 = np.matrix(np.array([0,0,0]))
g2, cost2 = gradientDescent(X2, y2, theta2, alpha, epoch)
def compute_cost(X,y,theta):
    #print(t_theta.shape)
    inner = np.power(((X.dot(theta.T))-y),2) 
    return sum(inner)/(2*len(X))
parameters = int(theta.flatten().shape[0]) 
alpha = 0.01
epoch =100
def gradientDescent(X, y, theta, alpha, epoch=1000):
    '''return theta, cost'''
    temp = np.array(np.zeros(theta.shape)) 
    parameters = int(theta.flatten().shape[0]) 
    cost = np.zeros(epoch) 
    m = X.shape[0] 
    
    for i in range(epoch):
        
        temp = theta - (alpha/m) * (X.dot(theta.T)- y).T.dot(X) 
        theta = temp
        cost[i] = compute_cost(X, y, theta) 
    return theta,cost
final_theta, cost = gradientDescent(X, y, theta, alpha, epoch)
final_cost = compute_cost(X, y, final_theta)
 
population = np.linspace(data.Population.min(), data.Population.max(), 97)
population.shape
population = np.linspace(data.Population.min(), data.Population.max(), 100) 
profit = final_theta[0,0] + (final_theta[0,1] * population) 

fcompute_cost(X2, y2, g2), g2
fig, ax = plt.subplots(figsize=(12,8))
ax.plot(np.arange(epoch), cost2, 'r')
ax.set_xlabel('Iterations')
ax.set_ylabel('Cost')
ax.set_title('Error vs. Training Epoch')
plt.show()
