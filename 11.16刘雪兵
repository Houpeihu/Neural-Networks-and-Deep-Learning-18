{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tensorflow版本为： 2.3.1\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "print(\"Tensorflow版本为：\",tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Device mapping:\n",
      "/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device\n",
      "/job:localhost/replica:0/task:0/device:XLA_GPU:0 -> device: XLA_GPU device\n",
      "\n",
      "[[22. 28.]\n",
      " [49. 64.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy\n",
    "import tensorflow as tf\n",
    "tf.compat.v1.disable_eager_execution() #保证sess.run()能够正常运行\n",
    "a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n",
    "b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n",
    "c = tf.matmul(a, b)\n",
    "sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True))\n",
    "print(sess.run(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.8 4.  1.2 0.2]]\n",
      "[0]\n",
      "(120, 4)\n",
      "(120, 3)\n",
      "[[1. 0. 0.]]\n",
      "Epoch 1/30\n",
      "1/1 [==============================] - 0s 128ms/step - loss: 1.1019 - accuracy: 0.3667 - val_loss: 1.1174 - val_accuracy: 0.2000\n",
      "Epoch 2/30\n",
      "1/1 [==============================] - 0s 13ms/step - loss: 1.0386 - accuracy: 0.3667 - val_loss: 1.0246 - val_accuracy: 0.5333\n",
      "Epoch 3/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.9695 - accuracy: 0.6417 - val_loss: 0.9387 - val_accuracy: 0.5667\n",
      "Epoch 4/30\n",
      "1/1 [==============================] - 0s 18ms/step - loss: 0.9043 - accuracy: 0.6917 - val_loss: 0.8713 - val_accuracy: 0.5667\n",
      "Epoch 5/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.8543 - accuracy: 0.6917 - val_loss: 0.8223 - val_accuracy: 0.5667\n",
      "Epoch 6/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.8118 - accuracy: 0.6917 - val_loss: 0.7770 - val_accuracy: 0.5667\n",
      "Epoch 7/30\n",
      "1/1 [==============================] - 0s 16ms/step - loss: 0.7680 - accuracy: 0.6917 - val_loss: 0.7381 - val_accuracy: 0.5667\n",
      "Epoch 8/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.7284 - accuracy: 0.6917 - val_loss: 0.7047 - val_accuracy: 0.5667\n",
      "Epoch 9/30\n",
      "1/1 [==============================] - 0s 17ms/step - loss: 0.6902 - accuracy: 0.6917 - val_loss: 0.6758 - val_accuracy: 0.5667\n",
      "Epoch 10/30\n",
      "1/1 [==============================] - 0s 17ms/step - loss: 0.6551 - accuracy: 0.6917 - val_loss: 0.6484 - val_accuracy: 0.5667\n",
      "Epoch 11/30\n",
      "1/1 [==============================] - 0s 16ms/step - loss: 0.6218 - accuracy: 0.6917 - val_loss: 0.6183 - val_accuracy: 0.5667\n",
      "Epoch 12/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.5898 - accuracy: 0.6917 - val_loss: 0.5870 - val_accuracy: 0.5667\n",
      "Epoch 13/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.5576 - accuracy: 0.6917 - val_loss: 0.5579 - val_accuracy: 0.5667\n",
      "Epoch 14/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.5254 - accuracy: 0.6917 - val_loss: 0.5339 - val_accuracy: 0.5667\n",
      "Epoch 15/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.4969 - accuracy: 0.6917 - val_loss: 0.5058 - val_accuracy: 0.6000\n",
      "Epoch 16/30\n",
      "1/1 [==============================] - 0s 16ms/step - loss: 0.4729 - accuracy: 0.7250 - val_loss: 0.4771 - val_accuracy: 0.7333\n",
      "Epoch 17/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.4524 - accuracy: 0.8500 - val_loss: 0.4556 - val_accuracy: 0.7667\n",
      "Epoch 18/30\n",
      "1/1 [==============================] - 0s 13ms/step - loss: 0.4345 - accuracy: 0.8750 - val_loss: 0.4399 - val_accuracy: 0.7667\n",
      "Epoch 19/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.4180 - accuracy: 0.9000 - val_loss: 0.4270 - val_accuracy: 0.8000\n",
      "Epoch 20/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.4028 - accuracy: 0.9083 - val_loss: 0.4149 - val_accuracy: 0.8000\n",
      "Epoch 21/30\n",
      "1/1 [==============================] - 0s 14ms/step - loss: 0.3887 - accuracy: 0.9167 - val_loss: 0.4023 - val_accuracy: 0.8000\n",
      "Epoch 22/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.3754 - accuracy: 0.9167 - val_loss: 0.3905 - val_accuracy: 0.8333\n",
      "Epoch 23/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.3627 - accuracy: 0.9333 - val_loss: 0.3784 - val_accuracy: 0.8667\n",
      "Epoch 24/30\n",
      "1/1 [==============================] - 0s 16ms/step - loss: 0.3505 - accuracy: 0.9333 - val_loss: 0.3669 - val_accuracy: 0.9000\n",
      "Epoch 25/30\n",
      "1/1 [==============================] - 0s 17ms/step - loss: 0.3386 - accuracy: 0.9417 - val_loss: 0.3552 - val_accuracy: 0.9000\n",
      "Epoch 26/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.3269 - accuracy: 0.9500 - val_loss: 0.3443 - val_accuracy: 0.9000\n",
      "Epoch 27/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.3153 - accuracy: 0.9583 - val_loss: 0.3332 - val_accuracy: 0.9333\n",
      "Epoch 28/30\n",
      "1/1 [==============================] - 0s 16ms/step - loss: 0.3037 - accuracy: 0.9583 - val_loss: 0.3223 - val_accuracy: 0.9333\n",
      "Epoch 29/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.2923 - accuracy: 0.9667 - val_loss: 0.3118 - val_accuracy: 0.9667\n",
      "Epoch 30/30\n",
      "1/1 [==============================] - 0s 15ms/step - loss: 0.2810 - accuracy: 0.9667 - val_loss: 0.3004 - val_accuracy: 1.0000\n",
      "Test loss: 0.30044853687286377\n",
      "Test accuracy: 1.0\n",
      "WARNING:tensorflow:From <ipython-input-8-9f24ae35647d>:113: Sequential.predict_classes (from tensorflow.python.keras.engine.sequential) is deprecated and will be removed after 2021-01-01.\n",
      "Instructions for updating:\n",
      "Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n",
      "label_pred4test:\n",
      " [0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2]\n",
      "label_init4test:\n",
      " [0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2]\n",
      "label_pred4train:\n",
      " [1 2 1 2 2 0 1 0 1 2 2 0 2 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1 0 2 2 0 0 2 0\n",
      " 2 2 1 1 2 2 0 1 1 2 1 2 1 0 0 0 2 0 2 2 2 0 0 1 0 2 1 2 2 1 2 2 1 0 1 0 1\n",
      " 1 0 1 0 0 2 2 2 0 0 2 0 2 0 2 2 0 2 0 1 0 1 1 0 0 1 0 1 1 0 1 1 2 1 2 0 0\n",
      " 2 1 2 1 2 2 2 2 0]\n",
      "label_init4train:\n",
      " [1 2 1 2 2 0 1 0 1 2 2 0 2 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1 0 2 2 0 0 2 0\n",
      " 2 2 1 1 2 2 0 1 1 2 1 2 1 0 0 0 2 0 1 2 2 0 0 1 0 2 1 2 2 1 2 2 1 0 1 0 1\n",
      " 1 0 1 0 0 2 2 2 0 0 1 0 2 0 2 2 0 2 0 1 0 1 1 0 0 1 0 1 1 0 1 1 1 1 2 0 0\n",
      " 2 1 2 1 2 2 1 2 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout\n",
    "from keras.optimizers import SGD\n",
    "from keras.models import load_model\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# 保存loss和acc，画图\n",
    "class LossHistory(keras.callbacks.Callback):\n",
    "    def on_train_begin(self, logs={}):\n",
    "        self.losses = {'batch': [], 'epoch': []}\n",
    "        self.accuracy = {'batch': [], 'epoch': []}\n",
    "        self.val_loss = {'batch': [], 'epoch': []}\n",
    "        self.val_acc = {'batch': [], 'epoch': []}\n",
    "\n",
    "    def on_batch_end(self, batch, logs={}):\n",
    "        self.losses['batch'].append(logs.get('loss'))\n",
    "        self.accuracy['batch'].append(logs.get('acc'))\n",
    "        self.val_loss['batch'].append(logs.get('val_loss'))\n",
    "        self.val_acc['batch'].append(logs.get('val_acc'))\n",
    "\n",
    "    def on_epoch_end(self, batch, logs={}):\n",
    "        self.losses['epoch'].append(logs.get('loss'))\n",
    "        self.accuracy['epoch'].append(logs.get('acc'))\n",
    "        self.val_loss['epoch'].append(logs.get('val_loss'))\n",
    "        self.val_acc['epoch'].append(logs.get('val_acc'))\n",
    "\n",
    "    def loss_plot(self, loss_type):\n",
    "        iters = range(len(self.losses[loss_type]))\n",
    "        plt.figure()\n",
    "        # train acc 训练集准确率 accuracy\n",
    "        plt.plot(iters, self.accuracy[loss_type], 'r', label='train acc')\n",
    "        # loss\n",
    "        plt.plot(iters, self.losses[loss_type], 'g', label='train loss')\n",
    "        if loss_type == 'epoch':\n",
    "            # val acc 验证集准确率 validation \n",
    "            plt.plot(iters, self.val_acc[loss_type], 'b', label='val acc')\n",
    "            # val loss \n",
    "            plt.plot(iters, self.val_loss[loss_type], 'k', label='val loss')\n",
    "        plt.grid(True)\n",
    "        plt.xlabel(loss_type)\n",
    "        plt.ylabel('acc-loss')\n",
    "        plt.legend(loc=\"upper left\")\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "# 获取数据\n",
    "data = load_iris()\n",
    "# print(data)\n",
    "# print(type(data))\n",
    "x = data['data']\n",
    "# print(x[1])\n",
    "y = data['target']\n",
    "# 训练集测试集划分 | random_state：随机数种子\n",
    "x_train, x_test, y_init_train, y_init_test = train_test_split(x, y, test_size=0.2, random_state=1)\n",
    "# 查看第一个样本\n",
    "print(x_test[:1])\n",
    "print(y_init_test[:1])\n",
    "\n",
    "print(x_train.shape)\n",
    "# one hot编码\n",
    "y_train = keras.utils.to_categorical(y_init_train, num_classes=3)\n",
    "print(y_train.shape)\n",
    "y_test = keras.utils.to_categorical(y_init_test, num_classes=3)\n",
    "print(y_test[:1])\n",
    "\n",
    "'''\n",
    "基于MLP（Multi-layer Perceptron）多层感知器的softmax多分类\n",
    "'''\n",
    "model = Sequential()\n",
    "# Dense(128) is a fully-connected layer with 128 hidden units.\n",
    "# in the first layer, you must specify the expected input data shape:\n",
    "# here, 4-dimensional vectors.\n",
    "model.add(Dense(128, activation='relu', input_dim=4))\n",
    "# Dropout随机失活，常用于图像识别中，防止过拟合\n",
    "# model.add(Dropout(0.2))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(3, activation='softmax'))\n",
    "\n",
    "# lr表示学习速率，momentum表示动量项，decay是学习速率的衰减系数(每个epoch衰减一次)\n",
    "# Nesterov的值是False或者True，表示使不使用Nesterov momentum\n",
    "# SGD随机梯度下降\n",
    "sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n",
    "\n",
    "# 编译模型\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=sgd,\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# 创建一个实例history\n",
    "history = LossHistory()\n",
    "\n",
    "# 训练\n",
    "model.fit(x_train, y_train,\n",
    "          epochs=30,  # 数据被轮30次\n",
    "          batch_size=128,\n",
    "          validation_data=(x_test, y_test),\n",
    "          callbacks=[history])\n",
    "# 保存模型\n",
    "# model.save('iris.h5')\n",
    "# 读取模型\n",
    "# model = load_model('iris.h5')\n",
    "\n",
    "score = model.evaluate(x_test, y_test, verbose=0, batch_size=128)  # 不写默认是verbose=1，打印进度条记录，0不打印。\n",
    "print('Test loss:', score[0])\n",
    "print('Test accuracy:', score[1])\n",
    "# p_pred = model.predict(x_test)\n",
    "# print(\"p_pred:\\n\", p_pred)\n",
    "label_pred = model.predict_classes(x_test, verbose=0)\n",
    "print(\"label_pred4test:\\n\", label_pred)\n",
    "print(\"label_init4test:\\n\", y_init_test)\n",
    "label_pred4train = model.predict_classes(x_train, verbose=0)\n",
    "print(\"label_pred4train:\\n\", label_pred4train)\n",
    "print(\"label_init4train:\\n\", y_init_train)\n",
    "\n",
    "# 绘制acc-loss曲线\n",
    "history.loss_plot('epoch')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
