{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "import tensorflow\n",
    "\n",
    "# 读取数据\n",
    "f=open('C:\\Users\\Lenovo\\Desktop\\sjm\\人工神经网络\\iris.txt')\n",
    "raw = pd.read_csv(f)\n",
    "data=raw.values[:,0:4]\n",
    "ln=len(raw)\n",
    "target=np.zeros(shape=(ln))\n",
    "for i in range(ln):\n",
    "    if raw.values[i][4] == 'Iris-setosa':\n",
    "        target[i]=0\n",
    "    elif raw.values[i][4] == 'Iris-versicolor':\n",
    "        target[i]=1\n",
    "    else:\n",
    "        target[i]=2\n",
    "print(target)\n",
    "#标准化\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "irisZX = StandardScaler().fit_transform(data)\n",
    "irisZX\n",
    "#将因变量转换为哑变量\n",
    "from keras.utils import to_categorical\n",
    "y = to_categorical(target)\n",
    "y[:5]\n",
    "#模型准备\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(5,input_dim = 4,activation = 'sigmoid'))\n",
    "model.add(Dense(3,activation = 'softmax'))#softmax保证输出结果为[0,1]\n",
    "model.compile(loss = 'categorical_crossentropy',\n",
    "              optimizer = 'rmsprop',\n",
    "              metrics = ['accuracy'])\n",
    "model.summary()\n",
    "model.fit(irisZX,y,epochs = 50)\n",
    "score=model.evaluate(irisZX,y)\n",
    "score\n",
    "#划分训练集和测试集\n",
    "irisZX=np.array(irisZX)\n",
    "X_train,X_test,y_train,y_test=train_test_split(irisZX,y)\n",
    "model.fit(X_train,y_train,epochs = 50)\n",
    "score=model.evaluate(X_test,y_test)\n",
    "score"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
